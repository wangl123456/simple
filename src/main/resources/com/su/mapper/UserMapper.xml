<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   
    PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"  
    "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"> 
<mapper namespace="com.su.mapper.UserMapper">
<cache-ref namespace="com.su.mapper.RoleMapper"/>
<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
  <resultMap id="userMap" type="com.su.model.SysUser">
     <!--此处id标签的作用是判断结果集字段是否相同 -->
     <id property="userPassword" column="user_password"/>
	 <result property="id" column="id"/>
	 <result property="userName" column="user_name"/>
	 <result property="userPassword" column="user_password"/>
	 <result property="userEmail" column="user_email"/>
	 <result property="userInfo" column="user_info"/>
	 <result property="headImg" column="head_img" jdbcType="BLOB"/>
	 <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
  </resultMap>
  <!--<select id="selectById" flushCache="true" resultMap="userMap">
      flushCache="true"清空一级缓存
    -->
  <select id="selectById" resultMap="userMap">
     select * from sys_user where id= #{id};
  </select>
  <select id="selectAll" resultType="com.su.model.SysUser">
     select id,
     user_name  userName,
     user_password  userPassword,
     user_email  userEmail,
     user_info  userInfo,
     head_img   headImg,
     create_time  createTime
     from sys_user
  </select>
 <!-- <select id="selectRolesByUserId" resultType="com.su.model.SysRole">
     select 
     r.id,
     r.role_name  roleName,
     r.enabled,
     r.create_by createBy,
     r.create_time createTime
     from sys_user u
     inner join sys_user_role ur on u.id=ur.user_id
     inner join sys_role r on ur.role_id=r.id
     where u.id= #{userId}
  </select>-->
  <select id="selectRolesByUserId" resultType="com.su.model.SysRole">
     select 
     r.id,
     r.role_name  roleName,
     r.enabled,
     r.create_by createBy,
     r.create_time createTime,
     u.user_name as "user.userName",
     u.user_email as "user.userEmail"
     from sys_user u
     inner join sys_user_role ur on u.id=ur.user_id
     inner join sys_role r on ur.role_id=r.id
     where u.id= #{userId}
  </select>
  <insert id="insert">
     insert into sys_user(
        id,user_name,user_password,user_email,user_info,head_img,create_time)
     values(
        #{id},#{userName},#{userPassword},#{userEmail},
        #{userInfo},
        #{headImg,jdbcType=BLOB},
        #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
     insert into sys_user(
        user_name,user_password,user_email,user_info,head_img,create_time)
     values(
        #{userName},#{userPassword},#{userEmail},
        #{userInfo},#{headImg,jdbcType=BLOB},
        #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insert3">
     insert into sys_user(
        user_name,user_password,user_email,user_info,head_img,create_time)
     values(
        #{userName},#{userPassword},#{userEmail},
        #{userInfo},#{headImg,jdbcType=BLOB},
        #{createTime,jdbcType=TIMESTAMP})
     <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
        select last_insert_id()
     </selectKey>
  </insert>
   <update id="updateById">
        update sys_user
        set user_name=#{userName},
            user_password=#{userPassword},
            user_email=#{userEmail},
            user_info=#{userInfo},
            head_img=#{headImg,jdbcType=BLOB},
            create_time=#{createTime,jdbcType=TIMESTAMP}
        where id=#{id}
   </update>
   <delete id="deleteById">
        delete from sys_user where id=#{id}
   </delete>
   <select id="selectRolesByUserIdAndRoleEnable" resultType="com.su.model.SysRole">
        select 
        r.id,
        r.role_name roleName,
        r.enabled,
        r.create_by createBy,
        r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id=#{userId} and r.enabled=#{enabled}
   </select>
   <select id="selectByUser" resultType="com.su.model.SysUser">
       select 
       user_name userName,
       user_password userPassword,
       user_email  userEmail,
       user_info  userInfo,
       head_img  headImg,
       create_time  createTime
       from sys_user
       where 1=1
   <if test="userName != null and userName != '' ">
       and user_name like concat('%',#{userName},'%')  
   </if>
   <if test="userPassword != null and userPassword != '' ">
       and user_password = #{userPassword}
   </if>
   </select>
   <update id="updateByIdSelective">
       update sys_user
       set
   <if test="userName != null and userName != ''">
       user_name=#{userName},  
   </if>
   <if test="userPassword != null and userPassword != ''">
       user_password=#{userPassword},
   </if>
   <if test="userEmail != null and userEmail !=''">
       user_email=#{userEmail},
   </if>
   <if test="userInfo != null and userInfo != ''">
       user_info=#{userInfo},
   </if>
   <if test="headImg != null and headImg != ''">
       head_img=#{headImg},
   </if>
   <if test="createTime != null and createTime != ''">
       create_time=#{createTime,jdbcType=TIMESTAMP},
   </if>
       id=#{id}
       where id=#{id}
   </update>
   <insert id="insert5" useGeneratedKeys="true" keyProperty="id">
       insert into sys_user(
       user_name,user_password,
   <if test="userEmail != null and userEmail != ''">
       user_email,
   </if>
       user_info,head_img,create_time)
       values(
       #{userName},#{userPassword},
   <if test="userEmail != null and userEmail != ''">
       #{userEmail},
   </if>
       #{userInfo},
       #{headImg,jdbcType=BLOB},
       #{createTime,jdbcType=TIMESTAMP})
   </insert>
   <select id="selectByIdOrUserName" resultType="com.su.model.SysUser">
       select id,
       user_name userName , 
       user_password userPassword, 
       user_email userEmail , 
       user_info userInfo , 
       head_img headImg , 
       create_time createTime 
       from sys_user
       where 1=1
   <choose>
    <when test="id != null">
       and id=#{id}
    </when>
    <when test="userName != null and userName != ''">
       and user_name=#{userName}
    </when> 
    <otherwise>
       and 1=2
    </otherwise> 
   </choose>
   </select>
   <select id="selectByUser2" resultType="com.su.model.SysUser">
       select 
       user_name userName,
       user_password userPassword,
       user_email  userEmail,
       user_info  userInfo,
       head_img  headImg,
       create_time  createTime
       from sys_user
   <where>
   <if test="userName != null and userName != '' ">
       and user_name like concat('%',#{userName},'%')  
   </if>
   <if test="userPassword != null and userPassword != '' ">
       and user_password = #{userPassword}
   </if>
   </where>
   </select>
   <update id="updateByIdSelective2">
       update sys_user
     <set>
      <if test="userName != null and userName != ''">
       user_name=#{userName},  
      </if>
      <if test="userPassword != null and userPassword != ''">
       user_password=#{userPassword},
      </if>
      <if test="userEmail != null and userEmail !=''">
       user_email=#{userEmail},
      </if>
      <if test="userInfo != null and userInfo != ''">
       user_info=#{userInfo},
      </if>
      <if test="headImg != null and headImg != ''">
       head_img=#{headImg},
      </if>
      <if test="createTime != null and createTime != ''">
       create_time=#{createTime,jdbcType=TIMESTAMP},
      </if>
      id=#{id},
    </set>
      where id=#{id}
   </update>
   <select id="selectByIdLit" resultType="com.su.model.SysUser">
      select
      id,
      user_name userName,
      user_password userPassword,
      user_email  userEmail,
      user_info  userInfo,
      head_img  headImg,
      create_time  createTime
      from sys_user
      where id in
   <foreach collection="list" open="(" close= ")" separator="," item="id" index="i">
      #{id}
   </foreach>
   </select>
   <insert id="inertList">
      insert into sys_user(
        user_name,user_password,user_email,
        user_info,head_img,create_time)
      values
   <foreach collection="list" item="user" separator=",">
      (
      #{user.userName},#{user.userPassword},#{user.userEmail},
      #{user.userInfo},#{user.headImg,jdbcType=BLOB},#{user.createTime,jdbcType=TIMESTAMP}
       )
   </foreach>
   </insert>
   <update id="updateByMap">
       update sys_user
       set
   <foreach collection="_parameter" item="val" index="key" separator=",">
       ${key}=#{val} 
   </foreach>
       where id=#{id}
   </update> 
   <select id="selectUserAndRoleById" resultType="com.su.model.SysUser">
       select 
       u.id,
       u.user_name userName,
       u.user_password userPassword,
       u.user_email userEmail,
       u.user_info userInfo,
       u.head_img headImg,
       u.create_time createTime,
       r.id "role.id",
       r.role_name "role.roleName",
       r.enabled "role.enabled",
       r.create_by "role.createBy",
       r.create_time "role.createTime"
       from sys_user u
       inner join sys_user_role ur on u.id=ur.user_id
       inner join sys_role r on ur.user_id=r.id
       where u.id=#{id}
   </select>
   <!--<resultMap id="userRoleMap" type="com.su.model.SysUser">
       <id property="id" column="id"/>
       <result property="userName" column="user_name"/>
       <result property="userPassword" column="user_password"/>
       <result property="userEmail" column="user_email"/>
       <result property="userInfo" column="user_info"/>
       <result property="headImg" column="head_img" jdbcType="BLOB"/>
       <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->
       <!--role相关属性  -->
       <!--<result property="role.id" column="role_id"/>
       <result property="role.roleName" column="role_name"/>
       <result property="role.enabled" column="enabled"/>
       <result property="role.createBy" column="create_by"/>
       <result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>
   </resultMap>-->
   <!--Mybatis代码生成器里包含基本的resultMap配置，通过extends的方式实现映射 
   <resultMap id="userRoleMap"  extends="userMap" type="com.su.model.SysUser">
       <result property="role.roleName" column="role_name"/>
       <result property="role.enabled" column="enabled"/>
       <result property="role.createBy" column="create_by"/>
       <result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>
   </resultMap>  -->
   <resultMap id="userRoleMap" extends="userMap" type="com.su.model.SysUser">
     <association property="role" columnPrefix="role_" javaType="com.su.model.SysRole">
       <result property="roleName" column="role_name"/>
       <result property="enabled" column="enabled"/>
       <result property="createBy" column="create_by"/>
       <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
     </association>
   </resultMap>
  <!--  <select id="selectUserAndRoleById2" resultMap="userRoleMap">
       select 
       u.id,
       u.user_name,
       u.user_password,
       u.user_email,
       u.user_info,
       u.head_img,
       u.create_time,
       r.id role_id,
       r.role_name,
       r.enabled enabled,
       r.create_by create_by,
       r.create_time role_create_time
       from sys_user u
       inner join sys_user_role ur on u.id=ur.user_id
       inner join sys_role r on ur.role_id=r.id
       where u.id=#{id}
   </select>-->
   <select id="selectUserAndRoleById2" resultMap="userRoleMap">
       select 
       u.id,
       u.user_name,
       u.user_password,
       u.user_email,
       u.user_info,
       u.head_img,
       u.create_time,
       r.id role_id,
       r.role_name role_role_name,
       r.enabled role_enabled,
       r.create_by role_create_by,
       r.create_time role_create_time
       from sys_user u
       inner join sys_user_role ur on u.id=ur.user_id
       inner join sys_role r on ur.role_id=r.id
       where u.id=#{id}
   </select>
   <resultMap id="userRoleMapSelect" type="com.su.model.SysUser" extends="userMap">
       <association property="role" fetchType="lazy" column="{id=role_id}"
       select="com.su.mapper.RoleMapper.selectRoleById"
       />
   </resultMap>  
   <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
       select
       u.id,
       u.user_name,
       u.user_password,
       u.user_email,
       u.user_info,
       u.head_img,
       u.create_time,
       ur.role_id
       from sys_user u
       inner join sys_user_role ur on u.id=ur.user_id
       where u.id=#{id}
   </select>
   <!--<resultMap id="userRoleListMap"  extends="userMap" type="com.su.model.SysUser">
      <id property="id" column="id"/>
      <result property="userName" column="user_name"/>
      <result property="userPassword" column="user_password"/>
      <result property="userEmail" column="user_email"/>
      <result property="userInfo" column="user_info"/>
      <result property="headImg" column="head_img" jdbcType="BLOB"/>
      <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
      <collection property="roleList" columnPrefix="role_" javaType="com.su.model.SysRole">
         <id property="id" column="id"/>
         <result property="roleName" column="role_name"/>
         <result property="enable" column="enable"/>
         <result property="createBy" column="create_by"/>
         <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
      </collection>
   </resultMap>  -->
   <!--<resultMap id="userRoleListMap" extends="userMap" type="com.su.model.SysUser">
      <collection property="roleList" columnPrefix="role_" resultMap="com.su.mapper.RoleMapper.roleMap"/>
   </resultMap>
   <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
      select
      u.id,
      u.user_name,
      u.user_password,
      u.user_email,
      u.user_info,
      u.head_img,
      u.create_time,
      r.id role_id,
      r.role_name role_role_name,
      r.enabled role_enable,
      r.create_by role_create_by,
      r.create_time role_create_time
      from sys_user u 
      inner join sys_user_role ur on u.id=ur.user_id
      inner join sys_role r on ur.role_id=r.id
   </select>  -->
   <resultMap id="userRoleListMap" extends="userMap" type="com.su.model.SysUser">
      <collection property="roleList" columnPrefix="role_" resultMap="com.su.mapper.RoleMapper.rolePrivilegeListMap"/>
   </resultMap>
   <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
      select
      u.id,
      u.user_name,
      u.user_password,
      u.user_email,
      u.user_info,
      u.head_img,
      u.create_time,
      r.id role_id,
      r.role_name role_role_name,
      r.enabled role_enabled,
      r.create_by role_create_by,
      r.create_time role_create_time,
      p.id role_privilege_id,
      p.privilege_name role_privilege_privilege_name,
      p.privilege_url role_privilege_privilege_url
      from sys_user u
      inner join sys_user_role ur on u.id=ur.user_id
      inner join sys_role r on ur.role_id=r.id
      inner join sys_role_privilege rp on rp.role_id=r.id
      inner join sys_privilege p on p.id=rp.privilege_id
   </select>
   <select id="selectUserAndRoleById3" resultMap="userRoleMap">
      select 
       u.id,
       u.user_name userName,
       u.user_password userPassword,
       u.user_email userEmail,
       u.user_info userInfo,
       u.head_img headImg,
       u.create_time createTime,
       r.id "role.id",
       r.role_name "role.roleName",
       r.enabled "role.enabled",
       r.create_by "role.createBy",
       r.create_time "role.createTime"
       from sys_user u
       inner join sys_user_role ur on u.id=ur.user_id
       inner join sys_role r on ur.role_id=r.id
       where u.id=#{id}
   </select>
</mapper>